%  driver program for 2-d orientation gradient determinationfunction [uvwth,dgel] = FE(Mesh,Data,lambda)crds = Mesh.crds;conn = Mesh.conn;meltyp = Mesh.meltyp;numel = Mesh.numel;nnpe = Mesh.nnpe;nnps = Mesh.nnps;dof = Mesh.dof;uvw = [Data.u, Data.v, Data.w];th = Data.th;% Total number of nodesnumnp = size(crds,1);% Connectivitynp = conn;% Node coordinatesx = crds(:,1);y = crds(:,2);        %evaluates elemental information: shape function derivatives etc at the%quadrature points[nqptv,wtq,sfac,dndxi,dndet,nqpts,swt,ssfac,dnds] = shafac(meltyp,nnpe,nnps);% now start the computation of the global orientation gradientsFsr=zeros(numel*dof*nnpe,1);Fsv=zeros(numel*dof*nnpe,1); Ksr=zeros(numel*dof^2*nnpe*nnpe,1); Ksc=zeros(numel*dof^2*nnpe*nnpe,1); Ksv=zeros(numel*dof^2*nnpe*nnpe,1);Qsr=zeros(numel*dof^2*nnpe,1); Qsc=zeros(numel*dof^2*nnpe,1); Qsv=zeros(numel*dof^2*nnpe,1);fc=1; kc=1; qc=1;Be=zeros(numel,3*9,nnpe*dof);numgdof = dof*numnp;uvwth = zeros(1,numgdof); % loop over the elements to set up matricesfor   iele =1:1:numel       [dndx,dndy,detj] = sfder(iele,nnpe,nqptv,dndxi,dndet,np,x,y);      for j = 1:1:nqptv              uvwth_e(1,j) = uvw(iele,1);        uvwth_e(2,j) = uvw(iele,2);        uvwth_e(3,j) = uvw(iele,3);        uvwth_e(4,j) = th(iele);          end      [se,qe,Be(iele,:,:)] = elstif(dof,nnpe,nqptv,wtq,sfac,dndx,dndy,detj,uvwth_e);        [fe] = elforc(dof,nnpe,nqptv,wtq,sfac,detj,uvwth_e);    [Ksr,Ksc,Ksv,kc,Qsr,Qsc,Qsv,qc,Fsr,Fsv,fc] = assmbl_ful(iele,nnpe,np,se,qe,fe,Ksr,Ksc,Ksv,kc,Qsr,Qsc,Qsv,qc,Fsr,Fsv,fc);      disp([ num2str(iele/numel*100), '  % is complete!'])end% put in sparse global formatFs=sparse(Fsr,1,Fsv);Ks=sparse(Ksr,Ksc,Ksv);Qs=sparse(Qsr,Qsc,Qsv);%  impose boundary conditions  --  not yet done% [Ks,Fs] = bc_ful(numnp,npbc,bfx,bfy,Ks,Fs);% solveuvwth = full((Ks+lambda*Qs)\Fs);% Normalize the resultsfor i=1:1:numnp    uvwth(dof*(i-1)+1:dof*i-1) = uvwth(dof*(i-1)+1:dof*i-1)/norm(uvwth(dof*(i-1)+1:dof*i-1));end% Calculate orientation gradients per elementdgel=zeros(numel,3*9);% xel=zeros(numel,1);yel=zeros(numel,1);for iele=1:numel        nodes = conn(iele,:)';%     %     xel(iele)=mean(crds_new(nodes,1));%     yel(iele)=mean(crds_new(nodes,2));        uvwth_nodes = [];        for k=1:dof            for j=1:nnpe                    node = nodes(j);                    uvwth_nodes = [uvwth_nodes; uvwth(dof*(node-1)+k) ];                   %uvwth_nodes = [uvwth_nodes; uvwth()                        end    end                        grad(:,:) = Be(iele,:,:);            dgel(iele,1:3*9) = grad * uvwth_nodes;        end