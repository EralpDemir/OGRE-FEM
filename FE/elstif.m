function [se,qe,BMAT] = elstif(dof,nnpe,nqptv,wtq,sfac,dndx,dndy,detj,uvwth_e)% forms elemental stiffness matrix numdim = 2;nnpe2 = 2*nnpe; nnpe3 = 3*nnpe; iend1 =   nnpe*dof;sfac_onedof    = zeros(1,nnpe);sfac_fourdof    = zeros(dof,iend1);mdofnp      = zeros(iend1,iend1);%qe      = zeros(iend1,dof);equil_con   = zeros(iend1,iend1);% BMAT is 3D since it is in the crystal referenceBMAT = zeros(3*9,iend1);                                                               for   k=1:1:nqptv        xkfac= wtq(k)*detj(k);                                                                            for  i=1:1:nnpe         sfac_onedof(i)  = sfac(i,k);    end    for  i=1:1:dof        for j = 1:1:nnpe            j1=(i-1)*nnpe+j;            sfac_fourdof(i,j1)  = sfac_onedof(j);        end    end     u = uvwth_e(1,k);    v = uvwth_e(2,k);    w = uvwth_e(3,k);    th = uvwth_e(4,k);        % Axis vector    r=[u,v,w];            % Crystal orientation    [R]=angleaxis2ori(r,th);        % Gradient pre-multiplier    G = [2*(1-cosd(th))* u , 0 , 0  , (u^2 - 1) * sind(th);    (1-cosd(th)) * v , (1-cosd(th)) * u , sind(th) , u * v * sind(th) + w * cosd(th);    (1-cosd(th)) * w , -sind(th) , u * (1-cosd(th)) , u * w * sind(th) - v * cosd(th);    (1-cosd(th)) * v , (1-cosd(th)) * u , -sind(th) , v * u * sind(th) - w *cosd(th);    0 , 2 * (1-cosd(th)) * v , 0 , (v^2 - 1) * sind(th);    sind(th) , w * (1-cosd(th)) , v * (1-cosd(th)) , v * w * sind(th) + u * cosd(th);    (1-cosd(th)) * w , sind(th) , u * (1-cosd(th)) , w * u * sin(th) + v * cosd(th);    -sind(th) , w * (1-cosd(th)) , v * (1-cosd(th)) , v * w * sin(th) - u * cos(th);    0 , 0 , 2 * (1-cosd(th)) * w , (w^2 - 1) * sind(th);];           Gmat = [G, zeros(9,4), zeros(9,4);          zeros(9,4), G, zeros(9,4);          zeros(9,4), zeros(9,4), G];        mdofnp = mdofnp + xkfac*(sfac_fourdof'*sfac_fourdof);    %    qe = qe + xkfac*(sfac_fourdof');      bmatrix     = zeros(3*dof,iend1);    for  i=1:1:nnpe                         % Gradients in the sample reference        % Note 2D EBSD does not reveal gradients along z-direction        gs = [dndx(i,k); dndy(i,k); 0;];                % Gradient in the crystal reference        % Sample to crystal transformation        gc = R * gs;                            bmatrix(1,i)       = gc(1);        bmatrix(2,i+nnpe)  = gc(1);        bmatrix(3,i+nnpe2) = gc(1);        bmatrix(4,i+nnpe3) = gc(1);                bmatrix(5,i)       = gc(2);        bmatrix(6,i+nnpe)  = gc(2);        bmatrix(7,i+nnpe2) = gc(2);        bmatrix(8,i+nnpe3) = gc(2);                bmatrix(9,i)        = gc(3);        bmatrix(10,i+nnpe)  = gc(3);        bmatrix(11,i+nnpe2) = gc(3);        bmatrix(12,i+nnpe3) = gc(3);                    end     BMAT = Gmat * bmatrix + BMAT;  equil_con = equil_con + xkfac*( (Gmat * bmatrix)' * Gmat * bmatrix);  endBMAT = BMAT / nqptv;se = mdofnp ;qe = equil_con;                                                                    